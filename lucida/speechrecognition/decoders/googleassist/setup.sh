#!/bin/bash

LUCIDA_ROOT="`pwd`"
LUCIDA_ROOT="${LUCIDA_ROOT%/speechrecognition/decoders/googleassist}"

if [ -f 'configuration.py' ]; then
  if [ -f '.config' ]; then
    source ./.config
  fi
  set -e
  source ./configuration.py
  set +e
  echo "# ----- LAST STABLE CONFIGURATION ----- #" > .config
  echo "#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN" >> .config
  echo "LUCIDA_ROOT=\"$LUCIDA_ROOT\"" >> .config
  echo "CREDENTIALS_DIR=\"$CREDENTIALS_DIR\"" >> .config
  echo "GA_CLIENT_SECRET=\"$GA_CLIENT_SECRET\"" >> .config
  echo "FORCE_RESPONSE_STT=$FORCE_RESPONSE_STT" >> .config
else
  echo "You'll need to answer a few questions for first time setup. To change any of these options see configuration.py. To reset delete configuration.py"
  rm -f .config
fi


echo "#" > configuration.py
echo "# Configuration file for Google Assistant Speech to Text microservice" >> configuration.py
echo "#" >> configuration.py
echo "" >> configuration.py
echo "# NOTE: If you manually update the file keep in mind that this is both a python and bash file. Take care of the syntax accordingly" >> configuration.py

while [ -z "$CREDENTIALS_DIR" ] || [ -z "$GA_CLIENT_SECRET" ]; do
  echo ""
  secrets=($(find "`pwd`" -type f -name "*.json" | while read file; do grep "$file" -e "project_id" 2>&1 1>/dev/null; if [ $? -eq 0 ]; then echo "$file"; fi; done))
  if [ -d "$LUCIDA_ROOT/questionanswering/googleassist" ]; then
    secrets=(${secrets[@]} $(find "$LUCIDA_ROOT/questionanswering/googleassist" -type f -name "*.json" | while read file; do grep "$file" -e "project_id" 2>&1 1>/dev/null; if [ $? -eq 0 ]; then echo "$file"; fi; done))
    if [ -f "$LUCIDA_ROOT/questionanswering/googleassist/configuration.py" ]; then
      set -e
      source "$LUCIDA_ROOT/questionanswering/googleassist/configuration.py"
      set +e
      if [ ! -z "$CREDENTIALS_DIR" ] && [ -d "$CREDENTIALS_DIR" ] && [ ! -z "$GA_CLIENT_SECRET" ] && [ -f "$GA_CLIENT_SECRET"]; then
        echo "Successfully loaded credentials directory and Google client secret from Google Asssitant question answering microservice"
        break
      fi
    fi
  fi
  GA_CLIENT_SECRET=
  CREDENTIALS_DIR=
  mkdir -p auth
  CREDENTIALS_DIR=`pwd`"/auth"
  if [ ! -z "$secrets" ]; then
    echo "The following possible credentials were found in the Google Assitant directory. Select which one you want to use. You can also hit 0 to type in a custom path. (0-"${#secrets[*]}")"
    echo ""
    count=1
    for secret in ${secrets[@]}; do echo "[$count] $secret"; count=$(($count+1)); done
    echo "[0] Enter a custom path"
    while [ -z "$GA_CLIENT_SECRET" ]; do
      echo ""
      printf "Enter your choice [1]: "
      read response
      if [ -z "$response" ]; then response=1; fi
      if ! [[ "$response" =~ ^[0-9]+$ ]] ; then
        echo "Choice should be a number!! Try again..."
        continue
      fi
      if [ "$response" -eq 0 ]; then
        printf "Enter path to JSON file containing credentials: "
        read response
        response=`echo "$response" | sed s#^~/#$HOME/#`
        if [ -f "$response" ]; then
          grep "$response" -e "project_id" 2>&1 1>/dev/null
          if [ $? -eq 0 ]; then
            GA_CLIENT_SECRET=`pwd`"/auth/"$(basename "$response")
            if [[ $response != $GA_CLIENT_SECRET ]]; then
              cp -f "$response" auth 2>&1 1>/dev/null
            fi
          else
            echo "Not a valid client secret: $response"
          fi
        else
          echo "No such file: $response"
        fi
      elif [ $(($response-1)) -lt ${#secrets[*]} ]; then
        response=${secrets[$(($response-1))]}
        if [ -f "$response" ]; then
          GA_CLIENT_SECRET=`pwd`"/auth/"$(basename "$response")
          if [[ $response != $GA_CLIENT_SECRET ]]; then
            cp -f "$response" auth 2>&1 1>/dev/null
          fi
        else
          echo "File $response no longer exists!!! Please try a different choice.."
        fi
      else
        echo "Invalid choice!!! Please try again.."
      fi
    done
  else
    echo "No possible credential was found in the Google Assitant speech decoder directory. If you have one provide its path otherwise create one as explained in README"
    while [ -z "$GA_CLIENT_SECRET" ]; do
      printf "Enter path to JSON file containing credentials: "
      read response
      response=`echo "$response" | sed s#^~/#$HOME/#`
      if [ -f "$response" ]; then
        grep "$response" -e "project_id" 2>&1 1>/dev/null
        if [ $? -eq 0 ]; then
          GA_CLIENT_SECRET=`pwd`"/auth/"$(basename "$response")
          if [[ $response != $GA_CLIENT_SECRET ]]; then
            cp -f "$response" auth 2>&1 1>/dev/null
          fi
        else
          echo "Not a valid client secret: $response"
        fi
      else
        echo "No such file: $response"
      fi
    done
  fi
done

echo "" >> configuration.py
echo "# Lucida root directory. This is the directory which contains commandcenter. This will be shared between QA and STT microservices" >> configuration.py
echo "LUCIDA_ROOT=\"$LUCIDA_ROOT\"" >> configuration.py
echo "" >> configuration.py
echo "# Directory used to store Google Assistant credentials for the client and users. This will be shared between QA and STT microservices" >> configuration.py
echo "CREDENTIALS_DIR=\"$CREDENTIALS_DIR\"" >> configuration.py
echo "" >> configuration.py
echo "# Path to JSON file containing Google client credentials. This will be shared between QA and STT microservices" >> configuration.py
echo "GA_CLIENT_SECRET=\"$GA_CLIENT_SECRET\"" >> configuration.py

if [ -z "$FORCE_RESPONSE_STT" ]; then
  echo ""
  echo "Do you want to force a text transcript for Google Assistant response? This may be useful later when features are added to Lucida (y/n)"
  printf "FORCE_RESPONSE_STT [n]: "
  read response
  if [ -z "$respone" ]; then response="n"; fi
  if [[ "$response" == "n" ]] || [[ "$response" == "N" ]]; then
    FORCE_RESPONSE_STT=False
  else
    FORCE_RESPONSE_STT=True
  fi
fi

echo "" >> configuration.py
echo "# Do you want to force a text transcript for Google Assistant response? This may be useful later when features are added to Lucida (y/n)" >> configuration.py
echo "FORCE_RESPONSE_STT=$FORCE_RESPONSE_STT" >> configuration.py
echo ""

rm -f .config

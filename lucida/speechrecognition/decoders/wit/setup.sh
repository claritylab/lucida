#!/bin/bash

if [ -f 'configuration.py' ]; then
  if [ -f '.config' ]; then
    source ./.config
  fi
  set -e
  source ./configuration.py
  set +e
  echo "# ----- LAST STABLE CONFIGURATION ----- #" > .config
  echo "#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN" >> .config
  echo "WIT_API_VERSION=\"$WIT_API_VERSION\"" >> .config
  echo "WIT_API_TOKEN=\"$WIT_API_TOKEN\"" >> .config
  echo "WIT_REQUEST_TIMEOUT=$WIT_REQUEST_TIMEOUT" >> .config
else
  echo "You'll need to answer a few questions for first time setup. To change any of these options see configuration.py. To reset delete configuration.py"
  rm -f .config
fi

while [ 1 ]; do
  echo "#" > configuration.py
  echo "# Configuration file for Lucida's WIT.AI Speech Decoder" >> configuration.py
  echo "#" >> configuration.py
  echo "" >> configuration.py
  echo "# NOTE: If you manually update the file keep in mind that this is both a python and bash file. Take care of the syntax accordingly" >> configuration.py

  if [ -z "$WIT_API_VERSION" ]; then
    while [ 1 ]; do
      echo ""
      echo "Version of WIT.AI API to use. Latest version against which this script is tested is 27/06/2017."
      printf "WIT_API_VERSION [27/06/2017]: "
      read WIT_API_VERSION
      if [ -z "$WIT_API_VERSION" ]; then WIT_API_VERSION="27/06/2017"; fi
      echo "$WIT_API_VERSION" | grep -Poe "^[\d/]+$" > /dev/null
      if [ "$?" -ne 0 ]; then
        echo "[ERROR] Version string should be all numbers and '/'!!!"
        continue
      fi
      break
    done
  fi

  if [ -z "$WIT_API_TOKEN" ]; then
    while [ 1 ]; do
      echo ""
      echo "This may be the server access or client access token found on settings page for your WIT.AI application. See README"
      printf "WIT_API_TOKEN: "
      read WIT_API_TOKEN
      echo "$WIT_API_TOKEN" | grep -Poe "^[A-Z0-9]+$" > /dev/null
      if [ "$?" -ne 0 ]; then
        echo "[ERROR] Token string should be all capital letters and numbers!!!"
        continue
      fi
      break
    done
  fi

  while [ 1 ]; do
    echo ""
    echo "Verifying version and token strings..."
    echo ""
    RESPONSE=`curl -s -w "%{http_code}" -H "Authorization: Bearer $WIT_API_TOKEN" -H "Accept: application/json" "https://api.wit.ai/message?v=$WIT_API_VERSION&q=hello"`
    echo "$RESPONSE" | grep -Poe "200$" > /dev/null
    if [ "$?" -ne 0 ]; then
      RESPONSE=`echo "$RESPONSE" | grep -Poe "(?<=\"error\":\")[^\"]+"`
      if [ -z "$RESPONSE" ]; then
        echo "Could not connect to WIT.AI!!! Are you connected to the interenet???"
        echo "Will try again in five seconds..."
        sleep 5
        continue
      else
        echo "[ERROR] $RESPONSE"
        WIT_API_VERSION=""
        WIT_API_TOKEN=""
        continue 2
      fi
    fi
    echo "[INFO] Verified version and token strings."
    break
  done

  echo "" >> configuration.py
  echo "# This may be the server access or client access token found on settings page for your WIT.AI application. See README" >> configuration.py
  echo "WIT_API_TOKEN=\"$WIT_API_TOKEN\"" >> configuration.py
  echo "" >> configuration.py
  echo "# Version of WIT.AI API to use. Latest version against which this script is tested is 14/06/2017." >> configuration.py
  echo "WIT_API_VERSION=\"$WIT_API_VERSION\"" >> configuration.py

  if [ -z "$WIT_REQUEST_TIMEOUT" ]; then
    while [ 1 ]; do
      echo ""
      echo "Maximum tolerable time in seconds between sending last chunk of audio data and recieving results"
      printf "WIT_REQUEST_TIMEOUT [30]: "
      read WIT_REQUEST_TIMEOUT
      if [ -z "$WIT_REQUEST_TIMEOUT" ]; then WIT_REQUEST_TIMEOUT="30"; fi
      echo "$WIT_REQUEST_TIMEOUT" | grep -Poe "^\d+$" > /dev/null
      if [ "$?" -ne 0 ]; then
        echo "[ERROR] Request timeout should be a number!!!"
        continue
      fi
      break
    done
  fi
  echo "" >> configuration.py
  echo "# Maximum tolerable time in seconds between sending last chunk of audio data and recieving results" >> configuration.py
  echo "WIT_REQUEST_TIMEOUT=$WIT_REQUEST_TIMEOUT" >> configuration.py
  break
done
rm -f .config

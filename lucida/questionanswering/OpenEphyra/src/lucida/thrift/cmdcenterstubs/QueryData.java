/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lucida.thrift.cmdcenterstubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-22")
public class QueryData implements org.apache.thrift.TBase<QueryData, QueryData._Fields>, java.io.Serializable, Cloneable, Comparable<QueryData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryData");

  private static final org.apache.thrift.protocol.TField AUDIO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("audioData", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUDIO_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("audioFormat", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUDIO_B64_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("audioB64Encoding", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IMG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("imgData", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMG_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("imgFormat", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IMG_B64_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("imgB64Encoding", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TEXT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("textData", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryDataTupleSchemeFactory());
  }

  public String audioData; // required
  public String audioFormat; // required
  public boolean audioB64Encoding; // required
  public String imgData; // required
  public String imgFormat; // required
  public boolean imgB64Encoding; // required
  public String textData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUDIO_DATA((short)1, "audioData"),
    AUDIO_FORMAT((short)2, "audioFormat"),
    AUDIO_B64_ENCODING((short)3, "audioB64Encoding"),
    IMG_DATA((short)4, "imgData"),
    IMG_FORMAT((short)5, "imgFormat"),
    IMG_B64_ENCODING((short)6, "imgB64Encoding"),
    TEXT_DATA((short)7, "textData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUDIO_DATA
          return AUDIO_DATA;
        case 2: // AUDIO_FORMAT
          return AUDIO_FORMAT;
        case 3: // AUDIO_B64_ENCODING
          return AUDIO_B64_ENCODING;
        case 4: // IMG_DATA
          return IMG_DATA;
        case 5: // IMG_FORMAT
          return IMG_FORMAT;
        case 6: // IMG_B64_ENCODING
          return IMG_B64_ENCODING;
        case 7: // TEXT_DATA
          return TEXT_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUDIOB64ENCODING_ISSET_ID = 0;
  private static final int __IMGB64ENCODING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUDIO_DATA, new org.apache.thrift.meta_data.FieldMetaData("audioData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("audioFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_B64_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("audioB64Encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IMG_DATA, new org.apache.thrift.meta_data.FieldMetaData("imgData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("imgFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_B64_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("imgB64Encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEXT_DATA, new org.apache.thrift.meta_data.FieldMetaData("textData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryData.class, metaDataMap);
  }

  public QueryData() {
    this.audioData = "";

    this.audioFormat = "";

    this.audioB64Encoding = false;

    this.imgData = "";

    this.imgFormat = "";

    this.imgB64Encoding = false;

    this.textData = "";

  }

  public QueryData(
    String audioData,
    String audioFormat,
    boolean audioB64Encoding,
    String imgData,
    String imgFormat,
    boolean imgB64Encoding,
    String textData)
  {
    this();
    this.audioData = audioData;
    this.audioFormat = audioFormat;
    this.audioB64Encoding = audioB64Encoding;
    setAudioB64EncodingIsSet(true);
    this.imgData = imgData;
    this.imgFormat = imgFormat;
    this.imgB64Encoding = imgB64Encoding;
    setImgB64EncodingIsSet(true);
    this.textData = textData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryData(QueryData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAudioData()) {
      this.audioData = other.audioData;
    }
    if (other.isSetAudioFormat()) {
      this.audioFormat = other.audioFormat;
    }
    this.audioB64Encoding = other.audioB64Encoding;
    if (other.isSetImgData()) {
      this.imgData = other.imgData;
    }
    if (other.isSetImgFormat()) {
      this.imgFormat = other.imgFormat;
    }
    this.imgB64Encoding = other.imgB64Encoding;
    if (other.isSetTextData()) {
      this.textData = other.textData;
    }
  }

  public QueryData deepCopy() {
    return new QueryData(this);
  }

  @Override
  public void clear() {
    this.audioData = "";

    this.audioFormat = "";

    this.audioB64Encoding = false;

    this.imgData = "";

    this.imgFormat = "";

    this.imgB64Encoding = false;

    this.textData = "";

  }

  public String getAudioData() {
    return this.audioData;
  }

  public QueryData setAudioData(String audioData) {
    this.audioData = audioData;
    return this;
  }

  public void unsetAudioData() {
    this.audioData = null;
  }

  /** Returns true if field audioData is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioData() {
    return this.audioData != null;
  }

  public void setAudioDataIsSet(boolean value) {
    if (!value) {
      this.audioData = null;
    }
  }

  public String getAudioFormat() {
    return this.audioFormat;
  }

  public QueryData setAudioFormat(String audioFormat) {
    this.audioFormat = audioFormat;
    return this;
  }

  public void unsetAudioFormat() {
    this.audioFormat = null;
  }

  /** Returns true if field audioFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioFormat() {
    return this.audioFormat != null;
  }

  public void setAudioFormatIsSet(boolean value) {
    if (!value) {
      this.audioFormat = null;
    }
  }

  public boolean isAudioB64Encoding() {
    return this.audioB64Encoding;
  }

  public QueryData setAudioB64Encoding(boolean audioB64Encoding) {
    this.audioB64Encoding = audioB64Encoding;
    setAudioB64EncodingIsSet(true);
    return this;
  }

  public void unsetAudioB64Encoding() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDIOB64ENCODING_ISSET_ID);
  }

  /** Returns true if field audioB64Encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioB64Encoding() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDIOB64ENCODING_ISSET_ID);
  }

  public void setAudioB64EncodingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDIOB64ENCODING_ISSET_ID, value);
  }

  public String getImgData() {
    return this.imgData;
  }

  public QueryData setImgData(String imgData) {
    this.imgData = imgData;
    return this;
  }

  public void unsetImgData() {
    this.imgData = null;
  }

  /** Returns true if field imgData is set (has been assigned a value) and false otherwise */
  public boolean isSetImgData() {
    return this.imgData != null;
  }

  public void setImgDataIsSet(boolean value) {
    if (!value) {
      this.imgData = null;
    }
  }

  public String getImgFormat() {
    return this.imgFormat;
  }

  public QueryData setImgFormat(String imgFormat) {
    this.imgFormat = imgFormat;
    return this;
  }

  public void unsetImgFormat() {
    this.imgFormat = null;
  }

  /** Returns true if field imgFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetImgFormat() {
    return this.imgFormat != null;
  }

  public void setImgFormatIsSet(boolean value) {
    if (!value) {
      this.imgFormat = null;
    }
  }

  public boolean isImgB64Encoding() {
    return this.imgB64Encoding;
  }

  public QueryData setImgB64Encoding(boolean imgB64Encoding) {
    this.imgB64Encoding = imgB64Encoding;
    setImgB64EncodingIsSet(true);
    return this;
  }

  public void unsetImgB64Encoding() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGB64ENCODING_ISSET_ID);
  }

  /** Returns true if field imgB64Encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetImgB64Encoding() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGB64ENCODING_ISSET_ID);
  }

  public void setImgB64EncodingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGB64ENCODING_ISSET_ID, value);
  }

  public String getTextData() {
    return this.textData;
  }

  public QueryData setTextData(String textData) {
    this.textData = textData;
    return this;
  }

  public void unsetTextData() {
    this.textData = null;
  }

  /** Returns true if field textData is set (has been assigned a value) and false otherwise */
  public boolean isSetTextData() {
    return this.textData != null;
  }

  public void setTextDataIsSet(boolean value) {
    if (!value) {
      this.textData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUDIO_DATA:
      if (value == null) {
        unsetAudioData();
      } else {
        setAudioData((String)value);
      }
      break;

    case AUDIO_FORMAT:
      if (value == null) {
        unsetAudioFormat();
      } else {
        setAudioFormat((String)value);
      }
      break;

    case AUDIO_B64_ENCODING:
      if (value == null) {
        unsetAudioB64Encoding();
      } else {
        setAudioB64Encoding((Boolean)value);
      }
      break;

    case IMG_DATA:
      if (value == null) {
        unsetImgData();
      } else {
        setImgData((String)value);
      }
      break;

    case IMG_FORMAT:
      if (value == null) {
        unsetImgFormat();
      } else {
        setImgFormat((String)value);
      }
      break;

    case IMG_B64_ENCODING:
      if (value == null) {
        unsetImgB64Encoding();
      } else {
        setImgB64Encoding((Boolean)value);
      }
      break;

    case TEXT_DATA:
      if (value == null) {
        unsetTextData();
      } else {
        setTextData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUDIO_DATA:
      return getAudioData();

    case AUDIO_FORMAT:
      return getAudioFormat();

    case AUDIO_B64_ENCODING:
      return Boolean.valueOf(isAudioB64Encoding());

    case IMG_DATA:
      return getImgData();

    case IMG_FORMAT:
      return getImgFormat();

    case IMG_B64_ENCODING:
      return Boolean.valueOf(isImgB64Encoding());

    case TEXT_DATA:
      return getTextData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUDIO_DATA:
      return isSetAudioData();
    case AUDIO_FORMAT:
      return isSetAudioFormat();
    case AUDIO_B64_ENCODING:
      return isSetAudioB64Encoding();
    case IMG_DATA:
      return isSetImgData();
    case IMG_FORMAT:
      return isSetImgFormat();
    case IMG_B64_ENCODING:
      return isSetImgB64Encoding();
    case TEXT_DATA:
      return isSetTextData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryData)
      return this.equals((QueryData)that);
    return false;
  }

  public boolean equals(QueryData that) {
    if (that == null)
      return false;

    boolean this_present_audioData = true && this.isSetAudioData();
    boolean that_present_audioData = true && that.isSetAudioData();
    if (this_present_audioData || that_present_audioData) {
      if (!(this_present_audioData && that_present_audioData))
        return false;
      if (!this.audioData.equals(that.audioData))
        return false;
    }

    boolean this_present_audioFormat = true && this.isSetAudioFormat();
    boolean that_present_audioFormat = true && that.isSetAudioFormat();
    if (this_present_audioFormat || that_present_audioFormat) {
      if (!(this_present_audioFormat && that_present_audioFormat))
        return false;
      if (!this.audioFormat.equals(that.audioFormat))
        return false;
    }

    boolean this_present_audioB64Encoding = true;
    boolean that_present_audioB64Encoding = true;
    if (this_present_audioB64Encoding || that_present_audioB64Encoding) {
      if (!(this_present_audioB64Encoding && that_present_audioB64Encoding))
        return false;
      if (this.audioB64Encoding != that.audioB64Encoding)
        return false;
    }

    boolean this_present_imgData = true && this.isSetImgData();
    boolean that_present_imgData = true && that.isSetImgData();
    if (this_present_imgData || that_present_imgData) {
      if (!(this_present_imgData && that_present_imgData))
        return false;
      if (!this.imgData.equals(that.imgData))
        return false;
    }

    boolean this_present_imgFormat = true && this.isSetImgFormat();
    boolean that_present_imgFormat = true && that.isSetImgFormat();
    if (this_present_imgFormat || that_present_imgFormat) {
      if (!(this_present_imgFormat && that_present_imgFormat))
        return false;
      if (!this.imgFormat.equals(that.imgFormat))
        return false;
    }

    boolean this_present_imgB64Encoding = true;
    boolean that_present_imgB64Encoding = true;
    if (this_present_imgB64Encoding || that_present_imgB64Encoding) {
      if (!(this_present_imgB64Encoding && that_present_imgB64Encoding))
        return false;
      if (this.imgB64Encoding != that.imgB64Encoding)
        return false;
    }

    boolean this_present_textData = true && this.isSetTextData();
    boolean that_present_textData = true && that.isSetTextData();
    if (this_present_textData || that_present_textData) {
      if (!(this_present_textData && that_present_textData))
        return false;
      if (!this.textData.equals(that.textData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_audioData = true && (isSetAudioData());
    list.add(present_audioData);
    if (present_audioData)
      list.add(audioData);

    boolean present_audioFormat = true && (isSetAudioFormat());
    list.add(present_audioFormat);
    if (present_audioFormat)
      list.add(audioFormat);

    boolean present_audioB64Encoding = true;
    list.add(present_audioB64Encoding);
    if (present_audioB64Encoding)
      list.add(audioB64Encoding);

    boolean present_imgData = true && (isSetImgData());
    list.add(present_imgData);
    if (present_imgData)
      list.add(imgData);

    boolean present_imgFormat = true && (isSetImgFormat());
    list.add(present_imgFormat);
    if (present_imgFormat)
      list.add(imgFormat);

    boolean present_imgB64Encoding = true;
    list.add(present_imgB64Encoding);
    if (present_imgB64Encoding)
      list.add(imgB64Encoding);

    boolean present_textData = true && (isSetTextData());
    list.add(present_textData);
    if (present_textData)
      list.add(textData);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAudioData()).compareTo(other.isSetAudioData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioData, other.audioData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioFormat()).compareTo(other.isSetAudioFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioFormat, other.audioFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioB64Encoding()).compareTo(other.isSetAudioB64Encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioB64Encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioB64Encoding, other.audioB64Encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgData()).compareTo(other.isSetImgData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgData, other.imgData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgFormat()).compareTo(other.isSetImgFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgFormat, other.imgFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgB64Encoding()).compareTo(other.isSetImgB64Encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgB64Encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgB64Encoding, other.imgB64Encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextData()).compareTo(other.isSetTextData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textData, other.textData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryData(");
    boolean first = true;

    sb.append("audioData:");
    if (this.audioData == null) {
      sb.append("null");
    } else {
      sb.append(this.audioData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audioFormat:");
    if (this.audioFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.audioFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audioB64Encoding:");
    sb.append(this.audioB64Encoding);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgData:");
    if (this.imgData == null) {
      sb.append("null");
    } else {
      sb.append(this.imgData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgFormat:");
    if (this.imgFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.imgFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgB64Encoding:");
    sb.append(this.imgB64Encoding);
    first = false;
    if (!first) sb.append(", ");
    sb.append("textData:");
    if (this.textData == null) {
      sb.append("null");
    } else {
      sb.append(this.textData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryDataStandardSchemeFactory implements SchemeFactory {
    public QueryDataStandardScheme getScheme() {
      return new QueryDataStandardScheme();
    }
  }

  private static class QueryDataStandardScheme extends StandardScheme<QueryData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUDIO_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioData = iprot.readString();
              struct.setAudioDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUDIO_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioFormat = iprot.readString();
              struct.setAudioFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUDIO_B64_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.audioB64Encoding = iprot.readBool();
              struct.setAudioB64EncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgData = iprot.readString();
              struct.setImgDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMG_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgFormat = iprot.readString();
              struct.setImgFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMG_B64_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.imgB64Encoding = iprot.readBool();
              struct.setImgB64EncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEXT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textData = iprot.readString();
              struct.setTextDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.audioData != null) {
        oprot.writeFieldBegin(AUDIO_DATA_FIELD_DESC);
        oprot.writeString(struct.audioData);
        oprot.writeFieldEnd();
      }
      if (struct.audioFormat != null) {
        oprot.writeFieldBegin(AUDIO_FORMAT_FIELD_DESC);
        oprot.writeString(struct.audioFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUDIO_B64_ENCODING_FIELD_DESC);
      oprot.writeBool(struct.audioB64Encoding);
      oprot.writeFieldEnd();
      if (struct.imgData != null) {
        oprot.writeFieldBegin(IMG_DATA_FIELD_DESC);
        oprot.writeString(struct.imgData);
        oprot.writeFieldEnd();
      }
      if (struct.imgFormat != null) {
        oprot.writeFieldBegin(IMG_FORMAT_FIELD_DESC);
        oprot.writeString(struct.imgFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMG_B64_ENCODING_FIELD_DESC);
      oprot.writeBool(struct.imgB64Encoding);
      oprot.writeFieldEnd();
      if (struct.textData != null) {
        oprot.writeFieldBegin(TEXT_DATA_FIELD_DESC);
        oprot.writeString(struct.textData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryDataTupleSchemeFactory implements SchemeFactory {
    public QueryDataTupleScheme getScheme() {
      return new QueryDataTupleScheme();
    }
  }

  private static class QueryDataTupleScheme extends TupleScheme<QueryData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAudioData()) {
        optionals.set(0);
      }
      if (struct.isSetAudioFormat()) {
        optionals.set(1);
      }
      if (struct.isSetAudioB64Encoding()) {
        optionals.set(2);
      }
      if (struct.isSetImgData()) {
        optionals.set(3);
      }
      if (struct.isSetImgFormat()) {
        optionals.set(4);
      }
      if (struct.isSetImgB64Encoding()) {
        optionals.set(5);
      }
      if (struct.isSetTextData()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAudioData()) {
        oprot.writeString(struct.audioData);
      }
      if (struct.isSetAudioFormat()) {
        oprot.writeString(struct.audioFormat);
      }
      if (struct.isSetAudioB64Encoding()) {
        oprot.writeBool(struct.audioB64Encoding);
      }
      if (struct.isSetImgData()) {
        oprot.writeString(struct.imgData);
      }
      if (struct.isSetImgFormat()) {
        oprot.writeString(struct.imgFormat);
      }
      if (struct.isSetImgB64Encoding()) {
        oprot.writeBool(struct.imgB64Encoding);
      }
      if (struct.isSetTextData()) {
        oprot.writeString(struct.textData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.audioData = iprot.readString();
        struct.setAudioDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.audioFormat = iprot.readString();
        struct.setAudioFormatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.audioB64Encoding = iprot.readBool();
        struct.setAudioB64EncodingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imgData = iprot.readString();
        struct.setImgDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.imgFormat = iprot.readString();
        struct.setImgFormatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.imgB64Encoding = iprot.readBool();
        struct.setImgB64EncodingIsSet(true);
      }
      if (incoming.get(6)) {
        struct.textData = iprot.readString();
        struct.setTextDataIsSet(true);
      }
    }
  }

}

